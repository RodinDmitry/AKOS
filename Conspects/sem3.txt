АКОС Семинар
Задание
1)синтаксис передачи многих аргументов
возврат больших структур из функций
2)написать свой printf на с
  синтаксис ...
  wa_start
3)написать ls
------------------------------------------
stack
heap(куча)
Оперативная память - память, к которой процессор имеет прямой доступ.
------------------------------------------
Разбор
int x;
/* */
x = 3;
y = x*2;
/* */
1) Написано все всех функций
   Поподает в глобальную память(section .data)
   При загрузке программы выделяется оперативная память под данные
   Данные можно представить в виде массива байт
goto с точки зрения ассемблера
////////////
l:
++i;
if(i < 10) goto l;
////////////
l - смещение участа кода относительно начала (~метка памяти) 
аналогично jmp в ассемблере
с точки зрения asm функция - метка в коде
проблема - при реализации функйий через goto не известно куда возвращаться
asm: call - вызов функций
-----------------------------------------
Переполнеине буфера - перетирание данных при выход за границы выделенной памяти
-----------------------------------------
стековая память - используется только во время работа программы
stack: push
       pop
вызов функции
* положит в стек текущее место
* перейдет в фукцию
return (asm ret) - берет верхний адрес из стека и переходит по нему.
Примеры
///////////////
int main()
{
 l:
 goto l;
return 0;
}
///////////////
int f()
{
f();
return 0;
}
int main()
{
f();
return 0;
}
/////////////////
--------------------------------------
выделение памяти на стеке
при вызове функции выделсяется на стеке
стек растет с права налево
--------------------------------------
с++ две операции инициаизации 
* выделение памяти
* вызов конструктора
--------------------------------------
RAII pattern
--------------------------------------
class R
{
~R
};
--------------------------------------
cтек расширется в другую сторону для экономии памяти
| code section | .data | heap -> | <- stack |
стеком управляет компилятор
кучей упрявляет программист
//в данный момент стек и куча не могут пересечься
---------------------------------------
Конвенция языка с
f(a1,a2,...,an);
текущий адрес стека (в x86 esp)
printf
первый аргумент  - количество аргументов
стек |return adress|a1|a2|...|an|
--------------------------------------
printf("%d%d"x,y)
asm:
push y esp + 8
     x
call printf
stack: |ra|8|x|y|
x : esp + 8 + 8 + 8;
y : esp + 8 + 8 + 8 + 8;
--------------------------------------
int f()
{
   return s;
}
передача значения из функции 
1) через регистр (ограничение по размеру)
2) через стек (нет)
3) через глобальную память (нет)
--------------------------------------
struct C
{
int a;
int b;
};

С с;
структура
имя переменной - начало данных
имя поля - смешение
union - структура, все поля которой имеют 0 смещение
размер - размер максимального варианта поля
....................................................
c - opendir - открывает каталог
    readdir
    closedir


