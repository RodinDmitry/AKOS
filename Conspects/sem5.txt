АКОС семинар 
Задание 
========================================================================
1)Система плагинов
2)Должна запускать чужие программы и перенаправлять потоки в файлы
========================================================================
1) Системный вызов exac
берет файл с диска и запускает его
стуктура  - родительский процесс делает fork
дочерний процесс запускает exec
создается новый образ в памяти на основании того файла, что был запущен
CoW копирование при записи
------------------------------------------------------------------------
Система подкачки
Working set - часть программы, которая находится в памяти
________________________________________________________________________
Страницы                                          
физическая память делится на страницы(Physical Frames) (4кб)
адрес состоит из номера страницы и смещения внутри страницы
каталог страниц - сопоставляет номера страниц в виртуальной памяти
и их номера в физической
при отсутствии страницы в оперативной памяти, вызывается прерывание
Ошибку доступа к памяти можно получить, только выйдя за границу страницы
================================
сегментно - страничная модель
================================
CoW                             
отображение страниц из разных процессов на одинаковые в физической памяти
страницы помечаются read-only
при попытке изменеиния страниц копируются только те страницы,
которые претерпевают изменения
1) Статическая линковка
  * в одном файле  - компилятор
  * в нескольких файлах  - ld
2) Динамическая линковка
  * в so  - ld-linux
3) Link on demand 
   dl_open(load library)
   f = get_proc_add
   вызов функции по указателю f  
==========================================================================
PC1                             PC2
client side                     server side
f                         ->    lib -> f
RPC - удаленный запуск процедур
==========================================================================
Программы
Семейство функций exac 
Аргументы - индивидуальные настройки
Переменные окружения(enviroment variables) - программе 
передается конфигурационная информация 
PATH="/bin" exportPath $PATH
setenv
getenv
==========================================================================
argv[0] - имя программы
==========================================================================
Таблица файловых дескрипторов процесса
Фаловый поток - режим открытия и позиция в файле 
Стандартные потоки 
0 stdin
1 stdout
2 stderror
        unix   win
fopen | open | createFile
fread | read | ReadFile
fwrite| write | writefile
fseek | lseek | ???
ftell | ltell | ???
fclose | close | close
==========================================================================
Таблица хранит ссылку на яцейку описания в ОС
при fork таблица клонируется
если один из файлов закрывает дескриптор, то он закрывается только у 
этого файла
dup2  
ls > 1.txt
bash:                            new:            
1) fork();                       1)~
2)                               2) f = open("1.txt"); 
                                 3) close(1) // закрыть stdout
                                 4) dup2(3,1);
                                 5) exec("ls");

===========================================================================
extern C
mangling
 






