АКОС Семинар
__________________________________________________
Запуск программ, коммандная оболочка
__________________________________________________
Программа с точки зрения ОС
Программа -> процесс
Процесс
* уникальный PID
* exefile
* выделенная память под процесс
|text|data|stack|heap|
*файловые дескрипты(потоки ввода - вывода) (обозн. fd)
Пример : stdout,stdin,stderror
_________________________________________________
ОС предоставляет в предоставлении доступа к ресурсам
( или предоставления сервис - доступа)
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
Парадигма SOA (servise oriented architecture)
SDK/API
software interrupt
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
Псевдомногозадачность
1) Невытясняющаяя многозадачность
2) Вытяснающая многозадачность
HPET - микросхема таймера.Дает разрешающюю способность
до микро и нано секунд. При загрузке устанавливается
интевал срабатывания.
_________________________________________________
Прерывания
в x86 256 штук организаванно в таблицу(GIT) - указателя на 
функции, вызываемы при прерывании.
При запуске ОС выполняет первичную настройку и переводит 
процесор в защищенные режим.
Уровни приоритета(на х86)
ring0 - почти полный доступ к памяти(обычно ОС)
ring3 - жестки ограничения на действия
Обработка прерываний
exeption(trap) особый вид прерывания при нарушении установленных правил
Процесс загрузки(linux)
1) загрузка ядра ОС
ядро обычно работает в ring0
(linux: bzImage
        Kernel-...
 win: ntoskrnl.exe
2) запуск /sbin/init (PID 1) в третьем кольце   
3) программа getty  - обработка информации с виртуального терминала.
4) getty -> login - пускает в систему. Начало работы с пользователем.
5) shell - главная оболочка.
_________________________________________________
/proc - информация о всех запущенных процессах.
команды 
top | htop
kill
killall 
pstree | ps
_________________________________________________
Процессы размножаются клонированием
fork() 
Схема порождения процесса.
 int p = fork();
if(p>0)
{
  action1;
} else if(p == 0)
{
  action2;
} else
{
  // p < 0
  // no clone error
}
________________________________________________
Форк-бомба
// process 17
fork(); // 17 171
fork(); // 17 171 172 175                 
//написать без цикла fork-bomb
________________________________________________
Задание 
1)pstree
2)консольные утилиты.   
2)fork-bomb;










   
